OWASP-Juice-Shop
################
:Author: David Boyd
:Date: 2020-10-29

[Task 2] Let's Go on an Adventure!
**********************************

[Task 2] Questions
==================

**1. What's the Administrator's email address?**

Answer: admin@juice-sh.op

Walkthrough: **Walk through** the reviews

**2. What paramater is used for searching?**

Answer: q

Knowledge: 'q' for 'query'!

**3. What show does Jim reference in his review?**

Answer: Star Trek

Walkthrough3.1:

        1. **Walk through** the reviews searching for "jim".
        2. Google search "Fresh out of a replicator"

Walkthrough3.2:

        1. Write a script to collect all the reviews.
        2. Search outfile for jim
        3. GOTO Walkthrough3.1

.. code-block:: Python

        # Web scrape Juice Shop's Reviews
        for i in range(36):
                url = "http://$TM/rest/products/" + str(i) + "/reviews"
                webpage = requests.get(url)
                print(webpage.json()) >> docs/Reviews-N.txt

.. code-block:: Bash

        # Grep jim
        grep jim ./reviews/*

[Task 3] Inject the Juice
*************************
:OWASP: Injection

Introduction
============

SQLi
        malicious/malformed query input for the purpose to retriece/tamper data
        from DB --including account credentials.

command injection
        user input/user-controlled data into a web application that runs as system
        commands.

email injection
        unauthorized & malicious users sending emails from the email server.
        --occurs when extra data is added to the email fields, in which case, the
        server misinterprets.

SQL syntax
----------

single quote "'"
        closes the brackets in the SQL query.

"OR" keyword
        logical or.

double dashes "--"
        are comments.  In the case of "--" appearing at the end of an injection,
        it'll *comment out* the tailing web application's code (hopefully), and
        thus preventing any input validations.


[Task 3] Questions
==================
:Note: This SQLi method works for all emails found in web app (see: reviews!)

**Question #1: Log into the administrator account!**

Answer: 32a5e0f21372bcc1000a6088b93b458e41f0e02a

Walkthrough Method 1: Burp Suite

1. Burp Suite's Intercept mode; then
2. replace "email":"<value>" with SQLi ' or 1=1--
3. Forward

Walkthrough Method 2: Web App

1. Input *' or 1=1--* in the Email field
2. Password field required: use whatever.

**Question #2: Log into the Bender account!**

:Answer: fb364762a3c102b2db932069c0e6b78e738d4066

Walkthrough: Email field: bender@juice-sh.op'--

[Task 4] Who Broke My Lock?!
****************************
:OWASP: Broken Authentication
:About: Weak passwords + high priv accts; forgotten passwords

QUIZ
====

1. Bruteforce the Administrator account's password!
---------------------------------------------------
:ANSWER: c2110d06dc6f81c67cd8099ff0ba601241f1ac0e

Walkthrough
^^^^^^^^^^^

.. image:: ./docs/t4-q1-answer.png
        :alt: Burp Suite Sniper

Just make sure the login for admin is their email address, and not username.  I
wasted 3 days of re-running Burp Suite and hours of Hydra researching to
uncover this "small" overlook.  Although, I was never able to get Hydra to
properly run.

Hyrdra's issues with http-post-form (401 status code) and http-get (500 status
code):

.. code-block:: Bash

        # Hydra's code
        hydra -l admin -P ./best1050.txt $TM http-post-form \
        "/rest/user/login:email^CUSER^&password=^PASS^:F=Incorrect" -I

                # Hydra's Response
                [ERROR] the target is using HTTP auth, not a web form, received HTTP
                error code 401. Use module "http-get" instead.

        # Hydra module man page
        hydra -U http-get

        # Run http-get
        hydra -l 'admin@juice-sh.op' -P docs/best1050.txt $TM http-get
        "/rest/user/login"

                # Hydra's Response
                [WARNING] Unusual return code: 500 for admin@juice-sh.op:admin123
