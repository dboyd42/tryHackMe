nmap --script-help http* > nse_script-help_http.txt
###################################################


Starting Nmap 7.80 ( https://nmap.org ) at 2020-10-06 19:33 CDT

http-adobe-coldfusion-apsa1301
Categories: exploit vuln
https://nmap.org/nsedoc/scripts/http-adobe-coldfusion-apsa1301.html
  Attempts to exploit an authentication bypass vulnerability in Adobe Coldfusion
  servers to retrieve a valid administrator's session cookie.

  Reference:
  * APSA13-01: http://www.adobe.com/support/security/advisories/apsa13-01.html

http-affiliate-id
Categories: safe discovery
https://nmap.org/nsedoc/scripts/http-affiliate-id.html
  Grabs affiliate network IDs (e.g. Google AdSense or Analytics, Amazon
  Associates, etc.) from a web page. These can be used to identify pages
  with the same owner.

  If there is more than one target using an ID, the postrule of this
  script shows the ID along with a list of the targets using it.

  Supported IDs:
  * Google Analytics
  * Google AdSense
  * Amazon Associates

http-apache-negotiation
Categories: safe discovery
https://nmap.org/nsedoc/scripts/http-apache-negotiation.html
  Checks if the target http server has mod_negotiation enabled.  This
  feature can be leveraged to find hidden resources and spider a web
  site using fewer requests.

  The script works by sending requests for resources like index and home
  without specifying the extension. If mod_negotiate is enabled (default
  Apache configuration), the target would reply with content-location header
  containing target resource (such as index.html) and vary header containing
  "negotiate" depending on the configuration.

  For more information, see:
  * http://www.wisec.it/sectou.php?id=4698ebdc59d15
  * Metasploit auxiliary module
      /modules/auxiliary/scanner/http/mod_negotiation_scanner.rb

http-apache-server-status
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-apache-server-status.html
  Attempts to retrieve the server-status page for Apache webservers that
  have mod_status enabled. If the server-status page exists and appears to
  be from mod_status the script will parse useful information such as the
  system uptime, Apache version and recent HTTP requests.

  References:
  * http://httpd.apache.org/docs/2.4/mod/mod_status.html
  * https://blog.sucuri.net/2012/10/popular-sites-with-apache-server-status-enabled.html
  * https://www.exploit-db.com/ghdb/1355/
  * https://github.com/michenriksen/nmap-scripts

http-aspnet-debug
Categories: vuln discovery
https://nmap.org/nsedoc/scripts/http-aspnet-debug.html
  Determines if a ASP.NET application has debugging enabled using a HTTP DEBUG request.

  The HTTP DEBUG verb is used within ASP.NET applications to start/stop remote
  debugging sessions. The script sends a 'stop-debug' command to determine the
  application's current configuration state but access to RPC services is required
   to interact with the debugging session. The request does not change the
  application debugging configuration.

http-auth-finder
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-auth-finder.html
  Spiders a web site to find web pages requiring form-based or HTTP-based authentication. The results are returned in a table with each url and the
  detected method.

http-auth
Categories: default auth safe
https://nmap.org/nsedoc/scripts/http-auth.html
  Retrieves the authentication scheme and realm of a web service that requires
  authentication.

http-avaya-ipoffice-users
Categories: exploit vuln
https://nmap.org/nsedoc/scripts/http-avaya-ipoffice-users.html
  Attempts to enumerate users in Avaya IP Office systems 7.x.

  Avaya IP Office systems allow unauthenticated access to the URI '/system/user/scn_user_list'
  which returns a XML file containing user information such as display name, full name and
  extension number.

  * Tested on Avaya IP Office 7.0(27).

http-awstatstotals-exec
Categories: vuln intrusive exploit
https://nmap.org/nsedoc/scripts/http-awstatstotals-exec.html
  Exploits a remote code execution vulnerability in Awstats Totals 1.0 up to 1.14
  and possibly other products based on it (CVE: 2008-3922).

  This vulnerability can be exploited through the GET variable <code>sort</code>.
  The script queries the web server with the command payload encoded using PHP's
  chr() function:

  <code>?sort={%24{passthru%28chr(117).chr(110).chr(97).chr(109).chr(101).chr(32).chr(45).chr(97)%29}}{%24{exit%28%29}}</code>

  Common paths for Awstats Total:
  * <code>/awstats/index.php</code>
  * <code>/awstatstotals/index.php</code>
  * <code>/awstats/awstatstotals.php</code>

  References:
  * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3922
  * http://www.exploit-db.com/exploits/17324/

http-axis2-dir-traversal
Categories: vuln intrusive exploit
https://nmap.org/nsedoc/scripts/http-axis2-dir-traversal.html
  Exploits a directory traversal vulnerability in Apache Axis2 version 1.4.1 by
  sending a specially crafted request to the parameter <code>xsd</code>
  (BID 40343). By default it will try to retrieve the configuration file of the
  Axis2 service <code>'/conf/axis2.xml'</code> using the path
  <code>'/axis2/services/'</code> to return the username and password of the
  admin account.

  To exploit this vulnerability we need to detect a valid service running on the
  installation so we extract it from <code>/listServices</code> before exploiting
  the directory traversal vulnerability.  By default it will retrieve the
  configuration file, if you wish to retrieve other files you need to set the
  argument <code>http-axis2-dir-traversal.file</code> correctly to traverse to
  the file's directory. Ex. <code>../../../../../../../../../etc/issue</code>

  To check the version of an Apache Axis2 installation go to:
  http://domain/axis2/services/Version/getVersion

  Reference:
  * https://www.securityfocus.com/bid/40343
  * https://www.exploit-db.com/exploits/12721/

http-backup-finder
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-backup-finder.html
  Spiders a website and attempts to identify backup copies of discovered files.
  It does so by requesting a number of different combinations of the filename (eg. index.bak, index.html~, copy of index.html).

http-barracuda-dir-traversal
Categories: intrusive exploit auth
https://nmap.org/nsedoc/scripts/http-barracuda-dir-traversal.html
  Attempts to retrieve the configuration settings from a Barracuda
  Networks Spam & Virus Firewall device using the directory traversal
  vulnerability described at
  http://seclists.org/fulldisclosure/2010/Oct/119.

  This vulnerability is in the "locale" parameter of
  "/cgi-mod/view_help.cgi" or "/cgi-bin/view_help.cgi", allowing the
  information to be retrieved from a MySQL database dump.  The web
  administration interface runs on port 8000 by default.

  Barracuda Networks Spam & Virus Firewall <= 4.1.1.021 Remote Configuration Retrieval
  Original exploit by ShadowHatesYou <Shadow@SquatThis.net>
  For more information, see:
  http://seclists.org/fulldisclosure/2010/Oct/119
  http://www.exploit-db.com/exploits/15130/

http-bigip-cookie
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-bigip-cookie.html
  Decodes any unencrypted F5 BIG-IP cookies in the HTTP response.
  BIG-IP cookies contain information on backend systems such as
  internal IP addresses and port numbers.
  See here for more info: https://support.f5.com/csp/article/K6917

http-brute
Categories: intrusive brute
https://nmap.org/nsedoc/scripts/http-brute.html
  Performs brute force password auditing against http basic, digest and ntlm authentication.

  This script uses the unpwdb and brute libraries to perform password
  guessing. Any successful guesses are stored in the nmap registry, using
  the creds library, for other scripts to use.

http-cakephp-version
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-cakephp-version.html
  Obtains the CakePHP version of a web application built with the CakePHP
  framework by fingerprinting default files shipped with the CakePHP framework.

  This script queries the files 'vendors.php', 'cake.generic.css',
  'cake.icon.png' and 'cake.icon.gif' to try to obtain the version of the CakePHP
  installation.

  Since installations that had been upgraded are prone to false positives due to
  old files that aren't removed, the script displays 3 different versions:
  * Codebase: Taken from the existence of vendors.php (1.1.x or 1.2.x if it does and 1.3.x otherwise)
  * Stylesheet: Taken from cake.generic.css
  * Icon: Taken from cake.icon.gif or cake.icon.png

  For more information about CakePHP visit: http://www.cakephp.org/.

http-chrono
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-chrono.html
  Measures the time a website takes to deliver a web page and returns
  the maximum, minimum and average time it took to fetch a page.

  Web pages that take longer time to load could be abused by attackers in DoS or
  DDoS attacks due to the fact that they are likely to consume more resources on
  the target server. This script could help identifying these web pages.

http-cisco-anyconnect
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-cisco-anyconnect.html
  Connect as Cisco AnyConnect client to a Cisco SSL VPN and retrieves version
  and tunnel information.

http-coldfusion-subzero
Categories: exploit
https://nmap.org/nsedoc/scripts/http-coldfusion-subzero.html
  Attempts to retrieve version, absolute path of administration panel and the
  file 'password.properties' from vulnerable installations of ColdFusion 9 and
  10.

  This was based on the exploit 'ColdSub-Zero.pyFusion v2'.

http-comments-displayer
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-comments-displayer.html
  Extracts and outputs HTML and JavaScript comments from HTTP responses.

http-config-backup
Categories: auth intrusive
https://nmap.org/nsedoc/scripts/http-config-backup.html
  Checks for backups and swap files of common content management system
  and web server configuration files.

  When web server files are edited in place, the text editor can leave
  backup or swap files in a place where the web server can serve them. The
  script checks for these files:

  * <code>wp-config.php</code>: WordPress
  * <code>config.php</code>: phpBB, ExpressionEngine
  * <code>configuration.php</code>: Joomla
  * <code>LocalSettings.php</code>: MediaWiki
  * <code>/mediawiki/LocalSettings.php</code>: MediaWiki
  * <code>mt-config.cgi</code>: Movable Type
  * <code>mt-static/mt-config.cgi</code>: Movable Type
  * <code>settings.php</code>: Drupal
  * <code>.htaccess</code>: Apache

  And for each of these file applies the following transformations (using
  <code>config.php</code> as an example):

  * <code>config.bak</code>: Generic backup.
  * <code>config.php.bak</code>: Generic backup.
  * <code>config.php~</code>: Vim, Gedit.
  * <code>#config.php#</code>: Emacs.
  * <code>config copy.php</code>: Mac OS copy.
  * <code>Copy of config.php</code>: Windows copy.
  * <code>config.php.save</code>: GNU Nano.
  * <code>.config.php.swp</code>: Vim swap.
  * <code>config.php.swp</code>: Vim swap.
  * <code>config.php.old</code>: Generic backup.

  This script is inspired by the CMSploit program by Feross Aboukhadijeh:
  http://www.feross.org/cmsploit/.

http-cookie-flags
Categories: default safe vuln
https://nmap.org/nsedoc/scripts/http-cookie-flags.html
  Examines cookies set by HTTP services.  Reports any session cookies set
  without the httponly flag.  Reports any session cookies set over SSL without
  the secure flag.  If http-enum.nse is also run, any interesting paths found
  by it will be checked in addition to the root.

http-cors
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-cors.html
  Tests an http server for Cross-Origin Resource Sharing (CORS), a way
  for domains to explicitly opt in to having certain methods invoked by
  another domain.

  The script works by setting the Access-Control-Request-Method header
  field for certain enumerated methods in OPTIONS requests, and checking
  the responses.

http-cross-domain-policy
Categories: safe external vuln
https://nmap.org/nsedoc/scripts/http-cross-domain-policy.html
  Checks the cross-domain policy file (/crossdomain.xml) and the client-acces-policy file (/clientaccesspolicy.xml)
  in web applications and lists the trusted domains. Overly permissive settings enable Cross Site Request Forgery
  attacks and may allow attackers to access sensitive data. This script is useful to detect permissive
  configurations and possible domain names available for purchase to exploit the application.

  The script queries instantdomainsearch.com to lookup the domains. This functionality is
  turned off by default, to enable it set the script argument http-cross-domain-policy.domain-lookup.

  References:
  * http://sethsec.blogspot.com/2014/03/exploiting-misconfigured-crossdomainxml.html
  * http://gursevkalra.blogspot.com/2013/08/bypassing-same-origin-policy-with-flash.html
  * https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html
  * https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf
  * https://www.owasp.org/index.php/Test_RIA_cross_domain_policy_%28OTG-CONFIG-008%29
  * http://acunetix.com/vulnerabilities/web/insecure-clientaccesspolicy-xml-file

http-csrf
Categories: intrusive exploit vuln
https://nmap.org/nsedoc/scripts/http-csrf.html
  This script detects Cross Site Request Forgeries (CSRF) vulnerabilities.

  It will try to detect them by checking each form if it contains an unpredictable
  token for each user. Without one an attacker may forge malicious requests.

  To recognize a token in a form, the script will iterate through the form's
  attributes and will search for common patterns in their names. If that fails, it
  will also calculate the entropy of each attribute's value. A big entropy means a
  possible token.

  A common use case for this script comes along with a cookie that gives access
  in pages that require authentication, because that's where the privileged
  exist. See the http library's documentation to set your own cookie.

http-date
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-date.html
  Gets the date from HTTP-like services. Also prints how much the date
  differs from local time. Local time is the time the HTTP request was
  sent, so the difference includes at least the duration of one RTT.

http-default-accounts
Categories: discovery auth intrusive
https://nmap.org/nsedoc/scripts/http-default-accounts.html
  Tests for access with default credentials used by a variety of web applications and devices.

  It works similar to http-enum, we detect applications by matching known paths and launching a login routine using default credentials when found.
  This script depends on a fingerprint file containing the target's information: name, category, location paths, default credentials and login routine.

  You may select a category if you wish to reduce the number of requests. We have categories like:
  * <code>web</code> - Web applications
  * <code>routers</code> - Routers
  * <code>security</code> - CCTVs and other security devices
  * <code>industrial</code> - Industrial systems
  * <code>printer</code> - Network-attached printers and printer servers
  * <code>storage</code> - Storage devices
  * <code>virtualization</code> - Virtualization systems
  * <code>console</code> - Remote consoles

  You can also select a specific fingerprint or a brand, such as BIG-IQ or Siemens. This matching is based on case-insensitive words. This means that "nas" will select Seagate BlackArmor NAS storage but not Netgear ReadyNAS.

  For a fingerprint to be used it needs to satisfy both the category and name criteria.

  Please help improve this script by adding new entries to nselib/data/http-default-accounts.lua

  Remember each fingerprint must have:
  * <code>name</code> - Descriptive name
  * <code>category</code> - Category
  * <code>login_combos</code> - Table of login combinations
  * <code>paths</code> - Table containing possible path locations of the target
  * <code>login_check</code> - Login function of the target

  In addition, a fingerprint should have:
  * <code>target_check</code> - Target validation function. If defined, it will be called to validate the target before attempting any logins.
  * <code>cpe</code> - Official CPE Dictionary entry (see https://nvd.nist.gov/cpe.cfm)

  Default fingerprint file: /nselib/data/http-default-accounts-fingerprints.lua
  This script was based on http-enum.

http-devframework
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-devframework.html

  Tries to find out the technology behind the target website.

  The script checks for certain defaults that might not have been changed, like
  common headers or URLs or HTML content.

  While the script does some guessing, note that overall there's no way to
  determine what technologies a given site is using.

  You can help improve this script by adding new entries to
  nselib/data/http-devframework-fingerprints.lua

  Each entry must have:
  * <code>rapidDetect</code> - Callback function that is called in the beginning
  of detection process. It takes the host and port of target website as arguments.
  * <code>consumingDetect</code> - Callback function that is called for each
  spidered page. It takes the body of the response (HTML code) and the requested
  path as arguments.

  Note that the <code>consumingDetect</code> callback will not take place only if
  <code>rapid</code> option is enabled.


http-dlink-backdoor
Categories: exploit vuln
https://nmap.org/nsedoc/scripts/http-dlink-backdoor.html
  Detects a firmware backdoor on some D-Link routers by changing the User-Agent
  to a "secret" value. Using the "secret" User-Agent bypasses authentication
  and allows admin access to the router.

  The following router models are likely to be vulnerable: DIR-100, DIR-120,
  DI-624S, DI-524UP, DI-604S, DI-604UP, DI-604+, TM-G5240

  In addition, several Planex routers also appear to use the same firmware:
  BRL-04UR, BRL-04CW

  Reference: http://www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/

http-dombased-xss
Categories: intrusive exploit vuln
https://nmap.org/nsedoc/scripts/http-dombased-xss.html
  It looks for places where attacker-controlled information in the DOM may be used
  to affect JavaScript execution in certain ways. The attack is explained here:
  http://www.webappsec.org/projects/articles/071105.shtml

http-domino-enum-passwords
Categories: intrusive auth
https://nmap.org/nsedoc/scripts/http-domino-enum-passwords.html
  Attempts to enumerate the hashed Domino Internet Passwords that are (by
  default) accessible by all authenticated users. This script can also download
  any Domino ID Files attached to the Person document.  Passwords are presented
  in a form suitable for running in John the Ripper.

  The passwords may be stored in two forms (http://comments.gmane.org/gmane.comp.security.openwall.john.user/785):

  1. Saltless (legacy support?)
     Example: 355E98E7C7B59BD810ED845AD0FD2FC4
     John's format name: lotus5
  2. Salted (also known as "More Secure Internet Password")
     Example: (GKjXibCW2Ml6juyQHUoP)
     John's format name: dominosec

  It appears as if form based authentication is enabled, basic authentication
  still works. Therefore the script should work in both scenarios. Valid
  credentials can either be supplied directly using the parameters username
  and password or indirectly from results of http-brute or http-form-brute.

http-drupal-enum-users
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-drupal-enum-users.html
  Enumerates Drupal users by exploiting an information disclosure vulnerability
  in Views, Drupal's most popular module.

  Requests to admin/views/ajax/autocomplete/user/STRING return all usernames that
  begin with STRING. The script works by iterating STRING over letters to extract
  all usernames.

  For more information,see:
  * http://www.madirish.net/node/465

http-drupal-enum
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-drupal-enum.html
  Enumerates the installed Drupal modules/themes by using a list of known modules and themes.

  The script works by iterating over module/theme names and requesting
  MODULE_PATH/MODULE_NAME/LICENSE.txt for modules and THEME_PATH/THEME_NAME/LICENSE.txt.
  MODULE_PATH/THEME_PATH which is either provided by the user, grepped for in the html body
  or defaulting to sites/all/modules/.

  If the response status code is 200, it means that the module/theme is installed. By
  default, the script checks for the top 100 modules/themes (by downloads), given the
  huge number of existing modules (~18k) and themes(~1.4k).

  If you want to update your themes or module list refer to the link below.

  * https://svn.nmap.org/nmap-exp/gyani/misc/drupal-update.py

http-enum
Categories: discovery intrusive vuln
https://nmap.org/nsedoc/scripts/http-enum.html
  Enumerates directories used by popular web applications and servers.

  This parses a fingerprint file that's similar in format to the Nikto Web application
  scanner. This script, however, takes it one step further by building in advanced pattern matching as well
  as having the ability to identify specific versions of Web applications.

  You can also parse a Nikto-formatted database using http-fingerprints.nikto-db-path. This will try to parse
  most of the fingerprints defined in nikto's database in real time. More documentation about this in the
  nselib/data/http-fingerprints.lua file.

  Currently, the database can be found under Nmap's directory in the nselib/data folder. The file is called
  http-fingerprints and has a long description of its functionality in the file header.

  Many of the finger prints were discovered by me (Ron Bowes), and a number of them are from the Yokoso
  project, used with permission from Kevin Johnson (http://seclists.org/nmap-dev/2009/q3/0685.html).

  Initially, this script attempts to access two different random files in order to detect servers
  that don't return a proper 404 Not Found status. In the event that they return 200 OK, the body
  has any non-static-looking data removed (URI, time, etc), and saved. If the two random attempts
  return different results, the script aborts (since a 200-looking 404 cannot be distinguished from
  an actual 200). This will prevent most false positives.

  In addition, if the root folder returns a 301 Moved Permanently or 401 Authentication Required,
  this script will also abort. If the root folder has disappeared or requires authentication, there
  is little hope of finding anything inside it.

  By default, only pages that return 200 OK or 401 Authentication Required are displayed. If the
  <code>http-enum.displayall</code> script argument is set, however, then all results will be displayed (except
  for 404 Not Found and the status code returned by the random files). Entries in the http-fingerprints
  database can specify their own criteria for accepting a page as valid.


http-errors
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-errors.html
  This script crawls through the website and returns any error pages.

  The script will return all pages (sorted by error code) that respond with an
  http code equal or above 400. To change this behaviour, please use the
  <code>errcodes</code> option.

  The script, by default, spiders and searches within forty pages. For large web
  applications make sure to increase httpspider's <code>maxpagecount</code> value.
  Please, note that the script will become more intrusive though.

http-exif-spider
Categories: intrusive
https://nmap.org/nsedoc/scripts/http-exif-spider.html
  Spiders a site's images looking for interesting exif data embedded in
  .jpg files. Displays the make and model of the camera, the date the photo was
  taken, and the embedded geotag information.

http-favicon
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-favicon.html
  Gets the favicon ("favorites icon") from a web page and matches it against a
  database of the icons of known web applications. If there is a match, the name
  of the application is printed; otherwise the MD5 hash of the icon data is
  printed.

  If the script argument <code>favicon.uri</code> is given, that relative URI is
  always used to find the favicon. Otherwise, first the page at the root of the
  web server is retrieved and parsed for a <code><link rel="icon"></code>
  element. If that fails, the icon is looked for in <code>/favicon.ico</code>. If
  a <code><link></code> favicon points to a different host or port, it is ignored.

http-feed
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-feed.html
  This script crawls through the website to find any rss or atom feeds.

  The script, by default, spiders and searches within forty pages. For large web
  applications make sure to increase httpspider's <code>maxpagecount</code> value.
  Please, note that the script will become more intrusive though.

http-fetch
Categories: safe
https://nmap.org/nsedoc/scripts/http-fetch.html
  The script is used to fetch files from servers.

  The script supports three different use cases:
  * The paths argument isn't provided, the script spiders the host
    and downloads files in their respective folders relative to
    the one provided using "destination".
  * The paths argument(a single item or list) is provided and the path starts
    with "/", the script tries to fetch the path relative to the url
    provided via the argument "url".
  * The paths argument(a single item or list) is provided and the path doesn't
    start with "/". Then the script spiders the host and tries to find
    files which contain the path(now treated as a pattern).

http-fileupload-exploiter
Categories: intrusive exploit vuln
https://nmap.org/nsedoc/scripts/http-fileupload-exploiter.html
  Exploits insecure file upload forms in web applications
  using various techniques like changing the Content-type
  header or creating valid image files containing the
  payload in the comment.

http-form-brute
Categories: intrusive brute
https://nmap.org/nsedoc/scripts/http-form-brute.html
  Performs brute force password auditing against http form-based authentication.

  This script uses the unpwdb and brute libraries to perform password
  guessing. Any successful guesses are stored in the nmap registry, using
  the creds library, for other scripts to use.

  The script automatically attempts to discover the form method, action, and
  field names to use in order to perform password guessing. (Use argument
  path to specify the page where the form resides.) If it fails doing so
  the form components can be supplied using arguments method, path, uservar,
  and passvar. The same arguments can be used to selectively override
  the detection outcome.

  The script contains a small database of known web apps' form information. This
  improves form detection and also allows for form mangling and custom success
  detection functions. If the script arguments aren't expressive enough, users
  are encouraged to edit the database to fit.

  After attempting to authenticate using a HTTP GET or POST request the script
  analyzes the response and attempts to determine whether authentication was
  successful or not. The script analyzes this by checking the response using
  the following rules:

  1. If the response was empty the authentication was successful.
  2. If the onsuccess argument was provided then the authentication either
     succeeded or failed depending on whether the response body contained
     the message/pattern passed in the onsuccess argument.
  3. If no onsuccess argument was passed, and if the onfailure argument
     was provided then the authentication either succeeded or failed
     depending on whether the response body does not contain
     the message/pattern passed in the onfailure argument.
  4. If neither the onsuccess nor onfailure argument was passed and the
     response contains a form field named the same as the submitted
     password parameter then the authentication failed.
  5. Authentication was successful.

http-form-fuzzer
Categories: fuzzer intrusive
https://nmap.org/nsedoc/scripts/http-form-fuzzer.html
  Performs a simple form fuzzing against forms found on websites.
  Tries strings and numbers of increasing length and attempts to
  determine if the fuzzing was successful.

http-frontpage-login
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-frontpage-login.html
  Checks whether target machines are vulnerable to anonymous Frontpage login.

  Older, default configurations of Frontpage extensions allow
  remote user to login anonymously which may lead to server compromise.


http-generator
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-generator.html
  Displays the contents of the "generator" meta tag of a web page (default: /)
  if there is one.

http-git
Categories: default safe vuln
https://nmap.org/nsedoc/scripts/http-git.html
  Checks for a Git repository found in a website's document root
  /.git/<something>) and retrieves as much repo information as
  possible, including language/framework, remotes, last commit
  message, and repository description.

http-gitweb-projects-enum
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-gitweb-projects-enum.html
  Retrieves a list of Git projects, owners and descriptions from a gitweb (web interface to the Git revision control system).

http-google-malware
Categories: malware discovery safe external
https://nmap.org/nsedoc/scripts/http-google-malware.html
  Checks if hosts are on Google's blacklist of suspected malware and phishing
  servers. These lists are constantly updated and are part of Google's Safe
  Browsing service.

  To do this the script queries the Google's Safe Browsing service and you need
  to have your own API key to access Google's Safe Browsing Lookup services. Sign
  up for yours at http://code.google.com/apis/safebrowsing/key_signup.html

  * To learn more about Google's Safe Browsing:
  http://code.google.com/apis/safebrowsing/

  * To register and get your personal API key:
  http://code.google.com/apis/safebrowsing/key_signup.html

http-grep
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-grep.html
  Spiders a website and attempts to match all pages and urls against a given
  string. Matches are counted and grouped per url under which they were
  discovered.

  Features built in patterns like email, ip, ssn, discover, amex and more.
  The script searches for email and ip by default.


http-headers
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-headers.html
  Performs a HEAD request for the root folder ("/") of a web server and displays the HTTP headers returned.

http-hp-ilo-info
Categories: safe discovery
https://nmap.org/nsedoc/scripts/http-hp-ilo-info.html
  Attempts to extract information from HP iLO boards including versions and addresses.

  HP iLO boards have an unauthenticated info disclosure at <ip>/xmldata?item=all.
  It lists board informations such as server model, firmware version,
  MAC addresses, IP addresses, etc. This script uses the slaxml library
  to parse the iLO xml file and display the info.

http-huawei-hg5xx-vuln
Categories: exploit vuln
https://nmap.org/nsedoc/scripts/http-huawei-hg5xx-vuln.html
  Detects Huawei modems models HG530x, HG520x, HG510x (and possibly others...)
  vulnerable to a remote credential and information disclosure vulnerability. It
  also extracts the PPPoE credentials and other interesting configuration values.

  Attackers can query the URIs "/Listadeparametros.html" and "/wanfun.js" to
  extract sensitive information including PPPoE credentials, firmware version,
  model, gateway, dns servers and active connections among other values.

  This script exploits two vulnerabilities. One was discovered and reported by
  Adiaz from Comunidad Underground de Mexico (http://underground.org.mx) and it
  allows attackers to extract the pppoe password. The configuration disclosure
  vulnerability was discovered by Pedro Joaquin (http://hakim.ws).

  References:
  * http://websec.ca/advisories/view/Huawei-HG520c-3.10.18.x-information-disclosure
  * http://routerpwn.com/#huawei

http-icloud-findmyiphone
Categories: discovery safe external
https://nmap.org/nsedoc/scripts/http-icloud-findmyiphone.html
  Retrieves the locations of all "Find my iPhone" enabled iOS devices by querying
  the MobileMe web service (authentication required).

http-icloud-sendmsg
Categories: discovery safe external
https://nmap.org/nsedoc/scripts/http-icloud-sendmsg.html
  Sends a message to a iOS device through the Apple MobileMe web service. The
  device has to be registered with an Apple ID using the Find My Iphone
  application.

http-iis-short-name-brute
Categories: intrusive brute
https://nmap.org/nsedoc/scripts/http-iis-short-name-brute.html
  Attempts to brute force the 8.3 filenames (commonly known as short names) of files and directories in the root folder
  of vulnerable IIS servers. This script is an implementation of the PoC "iis shortname scanner".

  The script uses ~,? and * to bruteforce the short name of files present in the IIS document root.
  Short names have a restriction of 6 character file name followed by a three character extension.

  Notes:
  * The script might have to be run twice (according to the original author).
  * Tested against IIS 6.0 and 5.1.

  References:
  * Research paper: http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf
  * IIS Shortname Scanner PoC: https://github.com/irsdl/IIS-ShortName-Scanner

http-iis-webdav-vuln
Categories: vuln intrusive
https://nmap.org/nsedoc/scripts/http-iis-webdav-vuln.html
  Checks for a vulnerability in IIS 5.1/6.0 that allows arbitrary users to access
  secured WebDAV folders by searching for a password-protected folder and
  attempting to access it. This vulnerability was patched in Microsoft Security
  Bulletin MS09-020, https://nmap.org/r/ms09-020.

  A list of well known folders (almost 900) is used by default. Each one is
  checked, and if returns an authentication request (401), another attempt is
  tried with the malicious encoding. If that attempt returns a successful result
  (207), then the folder is marked as vulnerable.

  This script is based on the Metasploit auxiliary module
  auxiliary/scanner/http/wmap_dir_webdav_unicode_bypass

  For more information on this vulnerability and script, see:
  * http://blog.zoller.lu/2009/05/iis-6-webdac-auth-bypass-and-data.html
  * http://seclists.org/fulldisclosure/2009/May/att-134/IIS_Advisory_pdf.bin
  * http://www.skullsecurity.org/blog/?p=271
  * http://www.kb.cert.org/vuls/id/787932
  * http://www.microsoft.com/technet/security/advisory/971492.mspx

http-internal-ip-disclosure
Categories: vuln discovery safe
https://nmap.org/nsedoc/scripts/http-internal-ip-disclosure.html
  Determines if the web server leaks its internal IP address when sending an HTTP/1.0 request without a Host header.

  Some misconfigured web servers leak their internal IP address in the response
  headers when returning a redirect response. This is a known issue for some
  versions of Microsoft IIS, but affects other web servers as well.

http-joomla-brute
Categories: intrusive brute
https://nmap.org/nsedoc/scripts/http-joomla-brute.html
  Performs brute force password auditing against Joomla web CMS installations.

  This script initially reads the session cookie and parses the security token to perfom the brute force password auditing.
  It uses the unpwdb and brute libraries to perform password guessing. Any successful guesses are stored using the
  credentials library.

  Joomla's default uri and form names:
  * Default uri:<code>/administrator/index.php</code>
  * Default uservar: <code>username</code>
  * Default passvar: <code>passwd</code>

http-jsonp-detection
Categories: safe vuln discovery
https://nmap.org/nsedoc/scripts/http-jsonp-detection.html
  Attempts to discover JSONP endpoints in web servers. JSONP endpoints can be
  used to bypass Same-origin Policy restrictions in web browsers.

  The script searches for callback functions in the response to detect JSONP
  endpoints. It also tries to determine callback function through URL(callback
  function may be fully or partially controllable from URL) and also tries to
  bruteforce the most common callback variables through the URL.

  References : https://securitycafe.ro/2017/01/18/practical-jsonp-injection/


http-litespeed-sourcecode-download
Categories: vuln intrusive exploit
https://nmap.org/nsedoc/scripts/http-litespeed-sourcecode-download.html
  Exploits a null-byte poisoning vulnerability in Litespeed Web Servers 4.0.x
  before 4.0.15 to retrieve the target script's source code by sending a HTTP
  request with a null byte followed by a .txt file extension (CVE-2010-2333).

  If the server is not vulnerable it returns an error 400. If index.php is not
  found, you may try /phpinfo.php which is also shipped with LiteSpeed Web
  Server. The attack payload looks like this:
  * <code>/index.php\00.txt</code>

  References:
  * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2333
  * http://www.exploit-db.com/exploits/13850/

http-ls
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-ls.html
  Shows the content of an "index" Web page.

  TODO:
    - add support for more page formats

http-majordomo2-dir-traversal
Categories: intrusive vuln exploit
https://nmap.org/nsedoc/scripts/http-majordomo2-dir-traversal.html
  Exploits a directory traversal vulnerability existing in Majordomo2 to retrieve remote files. (CVE-2011-0049).

  Vulnerability originally discovered by Michael Brooks.

  For more information about this vulnerability:
  * http://www.mj2.org/
  * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0049
  * http://www.exploit-db.com/exploits/16103/

http-malware-host
Categories: malware safe
https://nmap.org/nsedoc/scripts/http-malware-host.html
  Looks for signature of known server compromises.

  Currently, the only signature it looks for is the one discussed here:
  http://blog.unmaskparasites.com/2009/09/11/dynamic-dns-and-botnet-of-zombie-web-servers/.
  This is done by requesting the page <code>/ts/in.cgi?open2</code> and
  looking for an errant 302 (it attempts to detect servers that always
  return 302). Thanks to Denis from the above link for finding this
  technique!

http-mcmp
Categories: safe discovery
https://nmap.org/nsedoc/scripts/http-mcmp.html
  Checks if the webserver allows mod_cluster management protocol (MCMP) methods.

  The script sends a MCMP PING message to determine protocol support, then issues
  the DUMP command to dump the current configuration seen by mod_cluster_manager.

  References:

  * https://developer.jboss.org/wiki/Mod-ClusterManagementProtocol

http-method-tamper
Categories: auth vuln
https://nmap.org/nsedoc/scripts/http-method-tamper.html
  Attempts to bypass password protected resources (HTTP 401 status) by performing HTTP verb tampering.
  If an array of paths to check is not set, it will crawl the web server and perform the check against any
  password protected resource that it finds.

  The script determines if the protected URI is vulnerable by performing HTTP verb tampering and monitoring
   the status codes. First, it uses a HEAD request, then a POST request and finally a random generated string
  ( This last one is useful when web servers treat unknown request methods as a GET request. This is the case
   for PHP servers ).

  If the table <code>paths</code> is set, it will attempt to access the given URIs. Otherwise, a web crawler
  is initiated to try to find protected resources. Note that in a PHP environment with .htaccess files you need to specify a
  path to a file rather than a directory to find misconfigured .htaccess files.

  References:
  * http://www.imperva.com/resources/glossary/http_verb_tampering.html
  * https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29
  * http://www.mkit.com.ar/labs/htexploit/
  * http://capec.mitre.org/data/definitions/274.html

http-methods
Categories: default safe
https://nmap.org/nsedoc/scripts/http-methods.html
  Finds out what options are supported by an HTTP server by sending an
  OPTIONS request. Lists potentially risky methods. It tests those methods
  not mentioned in the OPTIONS headers individually and sees if they are
  implemented. Any output other than 501/405 suggests that the method is
  if not in the range 400 to 600. If the response falls under that range then
  it is compared to the response from a randomly generated method.

  In this script, "potentially risky" methods are anything except GET,
  HEAD, POST, and OPTIONS. If the script reports potentially risky
  methods, they may not all be security risks, but you should check to
  make sure. This page lists the dangers of some common methods:

  http://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29

  The list of supported methods comes from the contents of the Allow and
  Public header fields. In verbose mode, a list of all methods is printed,
  followed by the list of potentially risky methods. Without verbose mode,
  only the potentially risky methods are shown.

http-mobileversion-checker
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-mobileversion-checker.html
  Checks if the website holds a mobile version.

http-ntlm-info
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-ntlm-info.html
  This script enumerates information from remote HTTP services with NTLM
  authentication enabled.

  By sending a HTTP NTLM authentication request with null domain and user
  credentials (passed in the 'Authorization' header), the remote service will
  respond with a NTLMSSP message (encoded within the 'WWW-Authenticate' header)
  and disclose information to include NetBIOS, DNS, and OS build version if
  available.

http-open-proxy
Categories: default discovery external safe
https://nmap.org/nsedoc/scripts/http-open-proxy.html
  Checks if an HTTP proxy is open.

  The script attempts to connect to www.google.com through the proxy and
  checks for a valid HTTP response code. Valid HTTP response codes are
  200, 301, and 302. If the target is an open proxy, this script causes
  the target to retrieve a web page from www.google.com.

http-open-redirect
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-open-redirect.html
  Spiders a website and attempts to identify open redirects. Open
  redirects are handlers which commonly take a URL as a parameter and
  responds with a HTTP redirect (3XX) to the target.  Risks of open redirects are
  described at http://cwe.mitre.org/data/definitions/601.html.

  Only open redirects that are directly linked on the target website can be
  discovered this way. If an open redirector is not linked, it will not be
  discovered.

http-passwd
Categories: intrusive vuln
https://nmap.org/nsedoc/scripts/http-passwd.html
  Checks if a web server is vulnerable to directory traversal by attempting to
  retrieve <code>/etc/passwd</code> or <code>\boot.ini</code>.

  The script uses several technique:
  * Generic directory traversal by requesting paths like <code>../../../../etc/passwd</code>.
  * Known specific traversals of several web servers.
  * Query string traversal. This sends traversals as query string parameters to paths that look like they refer to a local file name. The potential query is searched for in at the path controlled by the script argument <code>http-passwd.root</code>.

http-php-version
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-php-version.html
  Attempts to retrieve the PHP version from a web server. PHP has a number
  of magic queries that return images or text that can vary with the PHP
  version. This script uses the following queries:
  * <code>/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42</code>: gets a GIF logo, which changes on April Fool's Day.
  * <code>/?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000</code>: gets an HTML credits page.

  A list of magic queries is at http://www.0php.com/php_easter_egg.php.
  The script also checks if any header field value starts with
  <code>"PHP"</code> and reports that value if found.

  PHP versions after 5.5.0 do not respond to these queries.

  Link:
  * http://phpsadness.com/sad/11

http-phpmyadmin-dir-traversal
Categories: vuln exploit
https://nmap.org/nsedoc/scripts/http-phpmyadmin-dir-traversal.html
  Exploits a directory traversal vulnerability in phpMyAdmin 2.6.4-pl1 (and
  possibly other versions) to retrieve remote files on the web server.

  Reference:
  * http://www.exploit-db.com/exploits/1244/

http-phpself-xss
Categories: fuzzer intrusive vuln
https://nmap.org/nsedoc/scripts/http-phpself-xss.html
  Crawls a web server and attempts to find PHP files vulnerable to reflected
  cross site scripting via the variable <code>$_SERVER["PHP_SELF"]</code>.

  This script crawls the webserver to create a list of PHP files and then sends
  an attack vector/probe to identify PHP_SELF cross site scripting
  vulnerabilities.  PHP_SELF XSS refers to reflected cross site scripting
  vulnerabilities caused by the lack of sanitation of the variable
  <code>$_SERVER["PHP_SELF"]</code> in PHP scripts. This variable is commonly
  used in PHP scripts that display forms and when the script file name  is
  needed.

  Examples of Cross Site Scripting vulnerabilities in the variable $_SERVER[PHP_SELF]:
  * http://www.securityfocus.com/bid/37351
  * http://software-security.sans.org/blog/2011/05/02/spot-vuln-percentage
  * http://websec.ca/advisories/view/xss-vulnerabilities-mantisbt-1.2.x

  The attack vector/probe used is: <code>/'"/><script>alert(1)</script></code>

http-proxy-brute
Categories: brute intrusive external
https://nmap.org/nsedoc/scripts/http-proxy-brute.html
  Performs brute force password guessing against HTTP proxy servers.

http-put
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-put.html
  Uploads a local file to a remote web server using the HTTP PUT method. You must specify the filename and URL path with NSE arguments.

http-qnap-nas-info
Categories: safe discovery
https://nmap.org/nsedoc/scripts/http-qnap-nas-info.html
  Attempts to retrieve the model, firmware version, and enabled services from a
  QNAP Network Attached Storage (NAS) device.

http-referer-checker
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-referer-checker.html
  Informs about cross-domain include of scripts. Websites that include
  external javascript scripts are delegating part of their security to
  third-party entities.

http-rfi-spider
Categories: intrusive
https://nmap.org/nsedoc/scripts/http-rfi-spider.html
  Crawls webservers in search of RFI (remote file inclusion) vulnerabilities. It
  tests every form field it finds and every parameter of a URL containing a
  query.

http-robots.txt
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-robots.txt.html
  Checks for disallowed entries in <code>/robots.txt</code> on a web server.

  The higher the verbosity or debug level, the more disallowed entries are shown.

http-robtex-reverse-ip
Categories: discovery safe external
https://nmap.org/nsedoc/scripts/http-robtex-reverse-ip.html
  Obtains up to 100 forward DNS names for a target IP address by querying the Robtex service (https://www.robtex.com/ip-lookup/).

http-robtex-shared-ns
Categories: discovery safe external
https://nmap.org/nsedoc/scripts/http-robtex-shared-ns.html
  Finds up to 100 domain names which use the same name server as the target by querying the Robtex service at http://www.robtex.com/dns/.

  The target must be specified by DNS name, not IP address.

http-sap-netweaver-leak
Categories: safe discovery
https://nmap.org/nsedoc/scripts/http-sap-netweaver-leak.html
  Detects SAP Netweaver Portal instances that allow anonymous access to the
   KM unit navigation page. This page leaks file names, ldap users, etc.

  SAP Netweaber Portal with the Knowledge Management Unit enable allows unauthenticated
  users to list file system directories through the URL '/irj/go/km/navigation?Uri=/'.

  This issue has been reported and won't be fixed.

  References:
  * https://help.sap.com/saphelp_nw73ehp1/helpdata/en/4a/5c004250995a6ae10000000a42189b/frameset.htm

http-security-headers
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-security-headers.html
  Checks for the HTTP response headers related to security given in OWASP Secure Headers Project
  and gives a brief description of the header and its configuration value.

  The script requests the server for the header with http.head and parses it to list headers founds with their
  configurations. The script checks for HSTS(HTTP Strict Transport Security), HPKP(HTTP Public Key Pins),
  X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, Content-Security-Policy,
  X-Permitted-Cross-Domain-Policies, Set-Cookie, Expect-CT, Cache-Control, Pragma and Expires.

  References: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers


http-server-header
Categories: version
https://nmap.org/nsedoc/scripts/http-server-header.html
  Uses the HTTP Server header for missing version info. This is currently
  infeasible with version probes because of the need to match non-HTTP services
  correctly.

http-shellshock
Categories: exploit vuln intrusive
https://nmap.org/nsedoc/scripts/http-shellshock.html
  Attempts to exploit the "shellshock" vulnerability (CVE-2014-6271 and CVE-2014-7169) in web applications.

  To detect this vulnerability the script executes a command that prints a
  random string and then attempts to find it inside the response body. Web apps that
   don't print back information won't be detected with this method.

  By default the script injects the payload in the HTTP headers User-Agent,
   Cookie, Referer and also uses the payload as the header name.

  Vulnerability originally discovered by Stephane Chazelas.

  References:
  * http://www.openwall.com/lists/oss-security/2014/09/24/10
  * http://seclists.org/oss-sec/2014/q3/685
  * https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169
  * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271

http-sitemap-generator
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-sitemap-generator.html
  Spiders a web server and displays its directory structure along with
  number and types of files in each folder. Note that files listed as
  having an 'Other' extension are ones that have no extension or that
  are a root document.

http-slowloris-check
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-slowloris-check.html
  Tests a web server for vulnerability to the Slowloris DoS attack without
  actually launching a DoS attack.

  Slowloris was described at Defcon 17 by RSnake
  (see http://ha.ckers.org/slowloris/).

  This script opens two connections to the server, each without the final CRLF.
  After 10 seconds, second connection sends additional header. Both connections
  then wait for server timeout.  If second connection gets a timeout 10 or more
  seconds after the first one, we can conclude that sending additional header
  prolonged its timeout and that the server is vulnerable to slowloris DoS
  attack.

  A "LIKELY VULNERABLE" result means a server is subject to timeout-extension
  attack, but depending on the http server's architecture and resource limits, a
  full denial-of-service is not always possible. Complete testing requires
  triggering the actual DoS condition and measuring server responsiveness.

  You can specify custom http User-agent field with <code>http.useragent</code>
  script argument.

  Idea from Qualys blogpost:
  * https://community.qualys.com/blogs/securitylabs/2011/07/07/identifying-slow-http-attack-vulnerabilities-on-web-applications


http-slowloris
Categories: dos intrusive
https://nmap.org/nsedoc/scripts/http-slowloris.html
  Tests a web server for vulnerability to the Slowloris DoS attack by launching a Slowloris attack.

  Slowloris was described at Defcon 17 by RSnake
  (see http://ha.ckers.org/slowloris/).

  This script opens and maintains numerous 'half-HTTP' connections until
  the server runs out of resources, leading to a denial of service. When
  a successful DoS is detected, the script stops the attack and returns
  these pieces of information (which may be useful to tweak further
  filtering rules):
  * Time taken until DoS
  * Number of sockets used
  * Number of queries sent
  By default the script runs for 30 minutes if DoS is not achieved.

  Please note that the number of concurrent connexions must be defined
  with the <code>--max-parallelism</code> option (default is 20, suggested
  is 400 or more) Also, be advised that in some cases this attack can
  bring the web server down for good, not only while the attack is
  running.

  Also, due to OS limitations, the script is unlikely to work
  when run from Windows.

http-sql-injection
Categories: intrusive vuln
https://nmap.org/nsedoc/scripts/http-sql-injection.html
  Spiders an HTTP server looking for URLs containing queries vulnerable to an SQL
  injection attack. It also extracts forms from found websites and tries to identify
  fields that are vulnerable.

  The script spiders an HTTP server looking for URLs containing queries. It then
  proceeds to combine crafted SQL commands with susceptible URLs in order to
  obtain errors. The errors are analysed to see if the URL is vulnerable to
  attack. This uses the most basic form of SQL injection but anything more
  complicated is better suited to a standalone tool.

  We may not have access to the target web server's true hostname, which can prevent access to
  virtually hosted sites.

http-stored-xss
Categories: intrusive exploit vuln
https://nmap.org/nsedoc/scripts/http-stored-xss.html
  Posts specially crafted strings to every form it
  encounters and then searches through the website for those
  strings to determine whether the payloads were successful.

http-svn-enum
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-svn-enum.html
  Enumerates users of a Subversion repository by examining logs of most recent commits.

http-svn-info
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-svn-info.html
  Requests information from a Subversion repository.

http-title
Categories: default discovery safe
https://nmap.org/nsedoc/scripts/http-title.html
  Shows the title of the default page of a web server.

  The script will follow up to 5 HTTP redirects, using the default rules in the
  http library.

http-tplink-dir-traversal
Categories: vuln exploit
https://nmap.org/nsedoc/scripts/http-tplink-dir-traversal.html
  Exploits a directory traversal vulnerability existing in several TP-Link
  wireless routers. Attackers may exploit this vulnerability to read any of the
  configuration and password files remotely and without authentication.

  This vulnerability was confirmed in models WR740N, WR740ND and WR2543ND but
  there are several models that use the same HTTP server so I believe they could
  be vulnerable as well. I appreciate any help confirming the vulnerability in
  other models.

  Advisory:
  * http://websec.ca/advisories/view/path-traversal-vulnerability-tplink-wdr740

  Other interesting files:
  * /tmp/topology.cnf (Wireless configuration)
  * /tmp/ath0.ap_bss (Wireless encryption key)

http-trace
Categories: vuln discovery safe
https://nmap.org/nsedoc/scripts/http-trace.html
  Sends an HTTP TRACE request and shows if the method TRACE is enabled. If debug
  is enabled, it returns the header fields that were modified in the response.

http-traceroute
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-traceroute.html
  Exploits the Max-Forwards HTTP header to detect the presence of reverse proxies.

  The script works by sending HTTP requests with values of the Max-Forwards HTTP
  header varying from 0 to 2 and checking for any anomalies in certain response
  values such as the status code, Server, Content-Type and Content-Length HTTP
  headers and body values such as the HTML title.

  Based on the work of:
  * Nicolas Gregoire (nicolas.gregoire@agarri.fr)
  * Julien Cayssol (tools@aqwz.com)

  For more information, see:
  * http://www.agarri.fr/kom/archives/2011/11/12/traceroute-like_http_scanner/index.html

http-trane-info
Categories: discovery version safe
https://nmap.org/nsedoc/scripts/http-trane-info.html
  Attempts to obtain information from Trane Tracer SC devices. Trane Tracer SC
   is an intelligent field panel for communicating with HVAC equipment controllers
   deployed across several sectors including commercial facilities and others.

  The information is obtained from the web server that exposes sensitive content to
   unauthenticated users.

  Tested on Trane Tracer SC version 4.40.1211 and below.

  References:
  * http://websec.mx/publicacion/blog/Scripts-de-Nmap-para-Trane-Tracer-SC-HVAC

http-unsafe-output-escaping
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-unsafe-output-escaping.html
  Spiders a website and attempts to identify output escaping problems
  where content is reflected back to the user.  This script locates all
  parameters, ?x=foo&y=bar and checks if the values are reflected on the
  page. If they are indeed reflected, the script will try to insert
  ghz>hzx"zxc'xcv and check which (if any) characters were reflected
  back onto the page without proper html escaping.  This is an
  indication of potential XSS vulnerability.

http-useragent-tester
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-useragent-tester.html
  Checks if various crawling utilities are allowed by the host.

http-userdir-enum
Categories: auth intrusive
https://nmap.org/nsedoc/scripts/http-userdir-enum.html
  Attempts to enumerate valid usernames on web servers running with the mod_userdir
  module or similar enabled.

  The Apache mod_userdir module allows user-specific directories to be accessed
  using the http://example.com/~user/ syntax.  This script makes http requests in
  order to discover valid user-specific directories and infer valid usernames.  By
  default, the script will use Nmap's
  <code>nselib/data/usernames.lst</code>.  An HTTP response
  status of 200 or 403 means the username is likely a valid one and the username
  will be output in the script results along with the status code (in parentheses).

  This script makes an attempt to avoid false positives by requesting a directory
  which is unlikely to exist.  If the server responds with 200 or 403 then the
  script will not continue testing it.

  CVE-2001-1013: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2001-1013.

http-vhosts
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-vhosts.html
  Searches for web virtual hostnames by making a large number of HEAD requests against http servers using common hostnames.

  Each HEAD request provides a different
  <code>Host</code> header. The hostnames come from a built-in default
  list. Shows the names that return a document. Also shows the location of
  redirections.

  The domain can be given as the <code>http-vhosts.domain</code> argument or
  deduced from the target's name. For example when scanning www.example.com,
  various names of the form <name>.example.com are tried.

http-virustotal
Categories: safe malware external
https://nmap.org/nsedoc/scripts/http-virustotal.html
  Checks whether a file has been determined as malware by Virustotal. Virustotal
  is a service that provides the capability to scan a file or check a checksum
  against a number of the major antivirus vendors. The script uses the public
  API which requires a valid API key and has a limit on 4 queries per minute.
  A key can be acquired by registering as a user on the virustotal web page:
  * http://www.virustotal.com

  The scripts supports both sending a file to the server for analysis or
  checking whether a checksum (supplied as an argument or calculated from a
  local file) was previously discovered as malware.

  As uploaded files are queued for analysis, this mode simply returns a URL
  where status of the queued file may be checked.

http-vlcstreamer-ls
Categories: discovery safe
https://nmap.org/nsedoc/scripts/http-vlcstreamer-ls.html
  Connects to a VLC Streamer helper service and lists directory contents. The
  VLC Streamer helper service is used by the iOS VLC Streamer application to
  enable streaming of multimedia content from the remote server to the device.

http-vmware-path-vuln
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vmware-path-vuln.html
  Checks for a path-traversal vulnerability in VMWare ESX, ESXi, and Server (CVE-2009-3733).

  The vulnerability was originally released by Justin Morehouse and Tony Flick, who presented at Shmoocon 2010 (http://fyrmassociates.com/tools.html).

http-vuln-cve2006-3392
Categories: exploit vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-cve2006-3392.html
  Exploits a file disclosure vulnerability in Webmin (CVE-2006-3392)

  Webmin before 1.290 and Usermin before 1.220 calls the simplify_path function before decoding HTML.
  This allows arbitrary files to be read, without requiring authentication, using "..%01" sequences
  to bypass the removal of "../" directory traversal sequences.

http-vuln-cve2009-3960
Categories: exploit intrusive vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2009-3960.html
  Exploits cve-2009-3960 also known as Adobe XML External Entity Injection.

  This vulnerability permits to read local files remotely and is present in
  BlazeDS 3.2 and earlier, LiveCycle 8.0.1, 8.2.1, and 9.0,  LiveCycle Data
  Services 2.5.1, 2.6.1, and 3.0, Flex Data Services 2.0.1, and
  ColdFusion 7.0.2, 8.0, 8.0.1, and 9.0

  For more information see:
  * http://www.security-assessment.com/files/advisories/2010-02-22_Multiple_Adobe_Products-XML_External_Entity_and_XML_Injection.pdf
  * https://www.securityfocus.com/bid/38197
  * Metasploit module: auxiliary/scanner/http/adobe_xml_inject

http-vuln-cve2010-0738
Categories: safe auth vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2010-0738.html
  Tests whether a JBoss target is vulnerable to jmx console authentication bypass (CVE-2010-0738).

  It works by checking if the target paths require authentication or redirect to a login page that could be
  bypassed via a HEAD request. RFC 2616 specifies that the HEAD request should be treated exactly like GET but
  with no returned response body. The script also detects if the URL does not require authentication at all.

  For more information, see:
  * CVE-2010-0738 http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0738
  * http://www.imperva.com/resources/glossary/http_verb_tampering.html
  * https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29


http-vuln-cve2010-2861
Categories: intrusive vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2010-2861.html
  Executes a directory traversal attack against a ColdFusion
  server and tries to grab the password hash for the administrator user. It
  then uses the salt value (hidden in the web page) to create the SHA1
  HMAC hash that the web server needs for authentication as admin. You can
  pass this value to the ColdFusion server as the admin without cracking
  the password hash.

http-vuln-cve2011-3192
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2011-3192.html
  Detects a denial of service vulnerability in the way the Apache web server
  handles requests for multiple overlapping/simple ranges of a page.

  References:
  * https://seclists.org/fulldisclosure/2011/Aug/175
  * https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3192
  * https://www.tenable.com/plugins/nessus/55976

http-vuln-cve2011-3368
Categories: intrusive vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2011-3368.html
  Tests for the CVE-2011-3368 (Reverse Proxy Bypass) vulnerability in Apache HTTP server's reverse proxy mode.
  The script will run 3 tests:
  * the loopback test, with 3 payloads to handle different rewrite rules
  * the internal hosts test. According to Contextis, we expect a delay before a server error.
  * The external website test. This does not mean that you can reach a LAN ip, but this is a relevant issue anyway.

  References:
  * http://www.contextis.com/research/blog/reverseproxybypass/

http-vuln-cve2012-1823
Categories: exploit vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-cve2012-1823.html
  Detects PHP-CGI installations that are vulnerable to CVE-2012-1823, This
  critical vulnerability allows attackers to retrieve source code and execute
  code remotely.

  The script works by appending "?-s" to the uri to make vulnerable php-cgi
  handlers return colour syntax highlighted source. We use the pattern "<span
  style=.*>&lt;?" to detect
  vulnerable installations.

http-vuln-cve2013-0156
Categories: exploit vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2013-0156.html
  Detects Ruby on Rails servers vulnerable to object injection, remote command
  executions and denial of service attacks. (CVE-2013-0156)

  All Ruby on Rails versions before 2.3.15, 3.0.x before 3.0.19, 3.1.x before
  3.1.10, and 3.2.x before 3.2.11 are vulnerable. This script sends 3 harmless
  YAML payloads to detect vulnerable installations. If the malformed object
  receives a status 500 response, the server is processing YAML objects and
  therefore is likely vulnerable.

  References:
  * https://community.rapid7.com/community/metasploit/blog/2013/01/10/exploiting-ruby-on-rails-with-metasploit-cve-2013-0156',
  * https://groups.google.com/forum/?fromgroups=#!msg/rubyonrails-security/61bkgvnSGTQ/nehwjA8tQ8EJ',
  * http://cvedetails.com/cve/2013-0156/

http-vuln-cve2013-6786
Categories: exploit vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2013-6786.html
  Detects a URL redirection and reflected XSS vulnerability in Allegro RomPager
  Web server. The vulnerability has been assigned CVE-2013-6786.

  The check is general enough (script tag injection via Referer header) that some
  other software may be vulnerable in the same way.

http-vuln-cve2013-7091
Categories: exploit vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-cve2013-7091.html
  An 0 day was released on the 6th December 2013 by rubina119, and was patched in Zimbra 7.2.6.

  The vulnerability is a local file inclusion that can retrieve any file from the server.

  Currently, we read /etc/passwd and /dev/null, and compare the lengths to determine vulnerability.

  TODO:
  Add the possibility to read compressed file.
  Then, send some payload to create the new mail account.

http-vuln-cve2014-2126
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2014-2126.html
  Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA ASDM
  Privilege Escalation Vulnerability (CVE-2014-2126).

http-vuln-cve2014-2127
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2014-2127.html
  Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SSL VPN
  Privilege Escalation Vulnerability (CVE-2014-2127).

http-vuln-cve2014-2128
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2014-2128.html
  Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SSL VPN
  Authentication Bypass Vulnerability (CVE-2014-2128).

http-vuln-cve2014-2129
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2014-2129.html
  Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SIP
  Denial of Service Vulnerability (CVE-2014-2129).

http-vuln-cve2014-3704
Categories: vuln intrusive exploit
https://nmap.org/nsedoc/scripts/http-vuln-cve2014-3704.html
  Exploits CVE-2014-3704 also known as 'Drupageddon' in Drupal. Versions < 7.32
  of Drupal core are known to be affected.

  Vulnerability allows remote attackers to conduct SQL injection attacks via an
  array containing crafted keys.

  The script injects new Drupal administrator user via login form and then it
  attempts to log in as this user to determine if target is vulnerable. If that's
  the case following exploitation steps are performed:

  * PHP filter module which allows embedded PHP code/snippets to be evaluated is enabled,
  * permission to use PHP code for administrator users is set,
  * new article which contains payload is created & previewed,
  * cleanup: by default all DB records that were added/modified by the script are restored.

  Vulnerability originally discovered by Stefan Horst from SektionEins.

  Exploitation technique used to achieve RCE on the target is based on exploit/multi/http/drupal_drupageddon Metasploit module.

http-vuln-cve2014-8877
Categories: vuln intrusive exploit
https://nmap.org/nsedoc/scripts/http-vuln-cve2014-8877.html
  Exploits a remote code injection vulnerability (CVE-2014-8877) in Wordpress CM
  Download Manager plugin. Versions <= 2.0.0 are known to be affected.

  CM Download Manager plugin does not correctly sanitise the user input which
  allows remote attackers to execute arbitrary PHP code via the CMDsearch
  parameter to cmdownloads/, which is processed by the PHP 'create_function'
  function.

  The script injects PHP system() function into the vulnerable target in order to
  execute specified shell command.

http-vuln-cve2015-1427
Categories: vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-cve2015-1427.html
  This script attempts to detect a vulnerability, CVE-2015-1427, which  allows attackers
   to leverage features of this API to gain unauthenticated remote code execution (RCE).

   Elasticsearch versions 1.3.0-1.3.7 and 1.4.0-1.4.2 have a vulnerability in the Groovy scripting engine.
   The vulnerability allows an attacker to construct Groovy scripts that escape the sandbox and execute shell
   commands as the user running the Elasticsearch Java VM.

http-vuln-cve2015-1635
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2015-1635.html
  Checks for a remote code execution vulnerability (MS15-034) in Microsoft Windows systems (CVE2015-2015-1635).

  The script sends a specially crafted HTTP request with no impact on the system to detect this vulnerability.
  The affected versions are Windows 7, Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1,
  and Windows Server 2012 R2.

  References:
  * https://technet.microsoft.com/library/security/MS15-034

http-vuln-cve2017-1001000
Categories: vuln safe
https://nmap.org/nsedoc/scripts/http-vuln-cve2017-1001000.html
  Attempts to detect a privilege escalation vulnerability in Wordpress 4.7.0 and 4.7.1 that
  allows unauthenticated users to inject content in posts.

  The script connects to the Wordpress REST API to obtain the list of published posts and
  grabs the user id and date from there. Then it attempts to update the date field in the
  post with the same date information we just obtained. If the request doesn’t return an
  error, we mark the server as vulnerable.

  References:
  https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html


http-vuln-cve2017-5638
Categories: vuln
https://nmap.org/nsedoc/scripts/http-vuln-cve2017-5638.html
  Detects whether the specified URL is vulnerable to the Apache Struts
  Remote Code Execution Vulnerability (CVE-2017-5638).

http-vuln-cve2017-5689
Categories: vuln auth exploit
https://nmap.org/nsedoc/scripts/http-vuln-cve2017-5689.html
  Detects if a system with Intel Active Management Technology is vulnerable to the INTEL-SA-00075
  privilege escalation vulnerability (CVE2017-5689).

  This script determines if a target is vulnerable by attempting to perform digest authentication
  with a blank response parameter. If the authentication succeeds, a HTTP 200 response is received.

  References:
  * https://www.tenable.com/blog/rediscovering-the-intel-amt-vulnerability

http-vuln-cve2017-8917
Categories: vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-cve2017-8917.html
  An SQL Injection vulnerability affecting Joomla! 3.7.x before 3.7.1 allows for
  unauthenticated users to execute arbitrary SQL commands. This vulnerability was
  caused by a new component, <code>com_fields</code>, which was introduced in
  version 3.7. This component is publicly accessible, which means this can be
  exploited by any malicious individual visiting the site.

  The script attempts to inject an SQL statement that runs the <code>user()</code>
  information function on the target website. A successful injection will return
  the current MySQL user name and host name in the extra_info table.

  This script is based on a Python script written by brianwrf.

  References:
  * https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html
  * https://github.com/brianwrf/Joomla3.7-SQLi-CVE-2017-8917

http-vuln-misfortune-cookie
Categories: vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-misfortune-cookie.html
  Detects the RomPager 4.07 Misfortune Cookie vulnerability by safely exploiting it.
http-vuln-wnr1000-creds
Categories: exploit vuln intrusive
https://nmap.org/nsedoc/scripts/http-vuln-wnr1000-creds.html
  A vulnerability has been discovered in WNR 1000 series that allows an attacker
  to retrieve administrator credentials with the router interface.
  Tested On Firmware Version(s): V1.0.2.60_60.0.86 (Latest) and V1.0.2.54_60.0.82NA

  Vulnerability discovered by c1ph04.

http-waf-detect
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-waf-detect.html
  Attempts to determine whether a web server is protected by an IPS (Intrusion
  Prevention System), IDS (Intrusion Detection System) or WAF (Web Application
  Firewall) by probing the web server with malicious payloads and detecting
  changes in the response code and body.

  To do this the script will send a "good" request and record the response,
  afterwards it will match this response against new requests containing
  malicious payloads. In theory, web applications shouldn't react to malicious
  requests because we are storing the payloads in a variable that is not used by
  the script/file and only WAF/IDS/IPS should react to it.  If aggro mode is set,
  the script will try all attack vectors (More noisy)

  This script can detect numerous IDS, IPS, and WAF products since they often
  protect web applications in the same way.  But it won't detect products which
  don't alter the http traffic.  Results can vary based on product configuration,
  but this script has been tested to work against various configurations of the
  following products:

  * Apache ModSecurity
  * Barracuda Web Application Firewall
  * PHPIDS
  * dotDefender
  * Imperva Web Firewall
  * Blue Coat SG 400


http-waf-fingerprint
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-waf-fingerprint.html
  Tries to detect the presence of a web application firewall and its type and
  version.

  This works by sending a number of requests and looking in the responses for
  known behavior and fingerprints such as Server header, cookies and headers
  values. Intensive mode works by sending additional WAF specific requests to
  detect certain behaviour.

  Credit to wafw00f and w3af for some fingerprints.

http-webdav-scan
Categories: safe discovery default
https://nmap.org/nsedoc/scripts/http-webdav-scan.html
  A script to detect WebDAV installations. Uses the OPTIONS and PROPFIND methods.

  The script sends an OPTIONS request which lists the dav type, server type, date
  and allowed methods. It then sends a PROPFIND request and tries to fetch exposed
  directories and internal ip addresses by doing pattern matching in the response body.

  This script takes inspiration from the various scripts listed here:
  * http://carnal0wnage.attackresearch.com/2010/05/more-with-metasploit-and-webdav.html
  * https://github.com/sussurro/Metasploit-Tools/blob/master/modules/auxiliary/scanner/http/webdav_test.rb
  * http://code.google.com/p/davtest/

http-wordpress-brute
Categories: intrusive brute
https://nmap.org/nsedoc/scripts/http-wordpress-brute.html
  performs brute force password auditing against Wordpress CMS/blog installations.

  This script uses the unpwdb and brute libraries to perform password guessing. Any successful guesses are
  stored using the credentials library.

  Wordpress default uri and form names:
  * Default uri:<code>wp-login.php</code>
  * Default uservar: <code>log</code>
  * Default passvar: <code>pwd</code>

http-wordpress-enum
Categories: discovery intrusive
https://nmap.org/nsedoc/scripts/http-wordpress-enum.html
  Enumerates themes and plugins of Wordpress installations. The script can also detect
   outdated plugins by comparing version numbers with information pulled from api.wordpress.org.

  The script works with two separate databases for themes (wp-themes.lst) and plugins (wp-plugins.lst).
  The databases are sorted by popularity and the script will search only the top 100 entries by default.
  The theme database has around 32,000 entries while the plugin database has around 14,000 entries.

  The script determines the version number of a plugin by looking at the readme.txt file inside the plugin
  directory and it uses the file style.css inside a theme directory to determine the theme version.
  If the script argument check-latest is set to true, the script will query api.wordpress.org to obtain
  the latest version number available. This check is disabled by default since it queries an external service.

  This script is a combination of http-wordpress-plugins.nse and http-wordpress-themes.nse originally
  submited by Ange Gutek and Peter Hill.

  TODO:
  -Implement version checking for themes.

http-wordpress-users
Categories: auth intrusive vuln
https://nmap.org/nsedoc/scripts/http-wordpress-users.html
  Enumerates usernames in Wordpress blog/CMS installations by exploiting an
  information disclosure vulnerability existing in versions 2.6, 3.1, 3.1.1,
  3.1.3 and 3.2-beta2 and possibly others.

  Original advisory:
  * http://www.talsoft.com.ar/site/research/security-advisories/wordpress-user-id-and-user-name-disclosure/

http-xssed
Categories: safe external discovery
https://nmap.org/nsedoc/scripts/http-xssed.html
  This script searches the xssed.com database and outputs the result.

https-redirect
Categories: version
https://nmap.org/nsedoc/scripts/https-redirect.html
  Check for HTTP services that redirect to the HTTPS on the same port.
